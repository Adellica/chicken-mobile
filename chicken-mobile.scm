#!/bin/sh
#|
exec csi -s "$0" "$@"
|#

(use setup-api setup-helper-mod posix)

;; conventions from setup-api
(define (c-source-filename file)
  (conc file ".c"))


(define chicken-mobile-home (make-parameter "~/.chicken-mobile/"))

`(project `(cocoscheme 0.9
                       (dependencies (modules bind coops
                                              chickmunk))))


;; obs: assuming module name always = module.c file (from compile step)
(define (mk-module module)
  (let ([module (if (list? module)
                    (car module)
                    module)])
    `(,(conc"# -------------------- " module)
      "# (shared library)"
      "include $(CLEAR_VARS)"
      ,(conc "LOCAL_MODULE := " module)
      ,(conc "LOCAL_SRC_FILES := " (c-source-filename module))
      "LOCAL_SHARED_LIBRARIES := chicken"
      "LOCAL_CFLAGS := -DC_SHARED"
      "include $(BUILD_SHARED_LIBRARY)"
      "# (shared import library) "
      "include $(CLEAR_VARS)"
      ,(conc "LOCAL_MODULE := " (import-filename module))
      ,(conc "LOCAL_SRC_FILES := " (c-source-filename (import-filename module)))
      "LOCAL_SHARED_LIBRARIES := chicken"
      "LOCAL_CFLAGS := -DC_SHARED"
      "include $(BUILD_SHARED_LIBRARY)"
      "")))

;; ((csc-thunk 'test-mod '("a.scm" "b.scm")))

;; egg is `(egg-name sources) or just egg-name-source
(define (mk-modules modules)
  (assert (list? modules))
  (map mk-module modules))

(define modules `(bind
                  cplusplus-object
                  (coops coops-module) ;; (module-name source-file)
                  matchable
                  record-variants))

(print* "writing Chickem.mk ...")
(with-output-to-file "Chicken.mk"
  (lambda ()
    (print (string-join
            (flatten
             `(,(conc "# GENERATED BY chicken-mobile " (time->string (seconds->local-time)))
               "#" "#" "# (do not commit)" "#" "#" "" ""
               ,@(mk-modules modules)))
            "\n"))))
(print "done.")



;; (make-print-reasons #t)
;; (make/proc `(("liba" ("/tmp") ,(lambda () (print "---- ran liba")))
;;              ("main" ("liba") ,(lambda () (print "---- ran main"))))
;;            "main")

;; (pp (mk-module 'cplusplus-object))



