#!/bin/sh
#|
exec csi -s "$0" "$@"
|#

(use setup-api setup-helper-mod posix)

;; conventions from setup-api
(define (c-source-filename file)
  (conc file ".c"))


(define chicken-mobile-home (make-parameter "~/.chicken-mobile/"))

`(project `(cocoscheme 0.9
                       (dependencies (modules bind coops
                                              chickmunk))))

;; (plist-ref '(key1: a key2: b) key2:)
;; (plist-ref '(key1: a key2: b) false:)
;; (plist-ref '(key1: a key2: b fiasco:) key1:)
;; (plist-ref 'error key0:)
(define (plist-ref plist key)
  (assert (= 0 (remainder (length plist) 2)) "odd number of elements in plist")
  (let loop ([plist plist])
    (if (null? plist)
        #f
        (if (eq? key (car plist))
            (cadr plist)
            (loop (cddr plist))))))

;; (module-name key1: value1 key2: value2)
(define (modspec-ref module key)
  (if (list? module)
      (plist-ref (cdr module) key)
      #f))

;; (module-name '(bind 1 2 3))
;; (module-name 'bind)
(define (module-name module)
  (if (list? module) (car module) module))

;; (module-source-filename '(coops file: coops-module))
;; (module-source-filename '(cplusplus-object bind))
;; (module-source-filename 'bind)
(define (module-source-filename module)
  (source-filename (or (modspec-ref module file:)
                       (module-name module))))

;; (module-dir '(cplusplus-object dir: bind))
;; (module-dir '(cplusplus-object file: trick))
;; (module-dir 'cplusplus-object)
(define (module-dir module)
  (conc (or (modspec-ref module dir:) (module-name module))))

;; (module-source-path '(coops coops-module))
;; (module-source-path 'bind)
(define (module-source-path module)
  (make-pathname (module-dir module) (module-source-filename module)))

;; obs: assuming module name always = module.c file (from compile step)
(define (mk-module module)
  (let ([module (module-name module)])
    `(,(conc"# -------------------- " module)
      "# (shared library)"
      "include $(CLEAR_VARS)"
      ,(conc "LOCAL_MODULE := " module)
      ,(conc "LOCAL_SRC_FILES := " (c-source-filename module))
      "LOCAL_SHARED_LIBRARIES := chicken"
      "LOCAL_CFLAGS := -DC_SHARED"
      "include $(BUILD_SHARED_LIBRARY)"
      "# (shared import library) "
      "include $(CLEAR_VARS)"
      ,(conc "LOCAL_MODULE := " (import-filename module))
      ,(conc "LOCAL_SRC_FILES := " (c-source-filename (import-filename module)))
      "LOCAL_SHARED_LIBRARIES := chicken"
      "LOCAL_CFLAGS := -DC_SHARED"
      "include $(BUILD_SHARED_LIBRARY)"
      "")))


;; spec: list-of module-spec
;; module-spec: module-name | (module-name dir: module-dir file: module-file)
;; module-file and module-dir defaults to module-name
(define modules `(bind
                  (cplusplus-object dir: bind)
                  (coops file: coops-module)
                  matchable
                  record-variants))

(print* "writing Chickem.mk ...")
(with-output-to-file "Chicken.mk"
  (lambda ()
    (print (string-join
            (flatten
             `(,(conc "# GENERATED BY chicken-mobile " (time->string (seconds->local-time)))
               "#" "#" "# (do not commit)" "#" "#" "" ""
               ,@(map mk-module modules)))
            "\n"))))
(print "done.")



;; (make-print-reasons #t)
;; (make/proc `(("liba" ("/tmp") ,(lambda () (print "---- ran liba")))
;;              ("main" ("liba") ,(lambda () (print "---- ran main"))))
;;            "main")

;; (pp (mk-module 'cplusplus-object))



